//gpt.java를 기반으로 만듬
package Assignment12_13;
import java.awt.*;
import simView.*;

public class RRSM extends ViewableDigraph
{
	final int NODE = 4;
	final int QUEUE = 2;

	public RRSM()
	{
		super("rrsm");
    	
		ViewableAtomic g = new genr("g", 11);
		ViewableAtomic s = new scheduler("s", 0, NODE);
		ViewableAtomic t = new transd("t", 6000, NODE);
    	
		add(g);
		add(s);
		add(t);

		addCoupling(g, "out", s, "in");
		addCoupling(g, "out", t, "ariv");
		addCoupling(t, "out", g, "in");
		
		for(int i = 1; i <= NODE; i++) {
			ViewableAtomic p = new processor("processor" + i, 100+(i*30), QUEUE);
			add(p);
			
			addCoupling(p, "out1", t, "solved");
			addCoupling(p, "out2", t, "loss");
			addCoupling(s, "out" + i, p, "in");
		}
	}

    
    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(988, 646);
        ((ViewableComponent)withName("g")).setPreferredLocation(new Point(104, 94));
        ((ViewableComponent)withName("processor3")).setPreferredLocation(new Point(434, 266));
        ((ViewableComponent)withName("t")).setPreferredLocation(new Point(769, 189));
        ((ViewableComponent)withName("processor2")).setPreferredLocation(new Point(493, 197));
        ((ViewableComponent)withName("processor1")).setPreferredLocation(new Point(430, 127));
        ((ViewableComponent)withName("s")).setPreferredLocation(new Point(221, 252));
        ((ViewableComponent)withName("processor4")).setPreferredLocation(new Point(429, 333));
    }
}
